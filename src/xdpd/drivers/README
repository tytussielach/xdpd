Platform drivers
=================

Introduction
------------

Platform drivers encapsulate the device(platform) specific code. xDPd drivers may control hardware fast path devices (e.g. ASICs), control other software components that do the packet processing, or implement software fast path elements which process packets (e.g. user-space GNU/Linux or GNU/Linux DPDK).

How to port your platform
-------------------------

Disclaimer: a basic autotools knowledge is assumed in this short tutorial

0) Check first the introductory slides of xDPd's architecture, ROFL-pipeline and ROFL-hal doxygen documentation. 

http://www.xdpd.org

1) Decide a code-name for the new platform. The platform code-name must use '-' as a separator  xxx-yyy-zzz. Try to use a short code name. For our tutorial we will choose 'my-asic'.

2) Copy the example folder to 'my_asic/' (NOTE that '_' must be used instead of '-' in the folder name)

	sh# cp src/xdpd/drivers/example src/xdpd/drivers/my_asic/ -R

3) Edit README and put the relevant information.

4) Edit `configure.ac` and change the name of the package accordingly.

5) Edit all `Makefile.am` and substitute 'example' for 'my_asic'. Example of substitution in vim:

	%s/example/my_asic/c

6) Now add the platform to the list of available platforms in `config/hw.m4`. The diff should look something like:


	diff --git a/config/hw.m4 b/config/hw.m4
	index 93881ae..43fc18b 100644
	--- a/config/hw.m4
	+++ b/config/hw.m4
	@@ -11,6 +11,7 @@ AC_ARG_WITH(hw-support, AS_HELP_STRING([--with-hw-support="driver-name"],[Compil
					[bcm: compile Broadcom hardware support]
					[octeon: compile OCTEON hardware support]
					[netfpga10g: compile NetFPGA 10G hardware code (HW code not included)]
	+                               [my-asic: Tutorial ASIC driver]
					[example: compile the example forwarding module code]
	 ,
	  [ 
	@@ -52,6 +53,12 @@ if( test "$HW" = "netfpga10g");then
		PLATFORM=netfpga10g
		AC_CONFIG_SUBDIRS([src/xdpd/drivers/netfpga10g])
	 fi
	+if( test "$HW" = "my-asic");then
	+       msg="$msg MY ASIC"
	+       AC_DEFINE(HW_MY_ASIC)
	+       PLATFORM=my_asic
	+       AC_CONFIG_SUBDIRS([src/xdpd/drivers/my_asic])
	+fi
	 if( test "$HW" = "example");then
		msg="$msg Example platform"
		AC_DEFINE(HW_EXAMPLE)

7) Run `autogen.sh`. At this point the code should compile. Remember that to compile a hw platform different than the default one, you must specify --with-hw-support='my-asic' (Note '-'):

	sh# bash autogen.sh
	sh# cd build
	sh# ../configure --enable-debug --disable-silent-rules --with-hw-support="my-asic"
	sh# make

8) Now add the necessary functionality behind the HAL calls. For that, you can take as a reference:

- gnu-linux/gnu-linux-dpdk: software switch
- netfpga10g: ASIC port

If you are using the software packet processing API of ROFL-pipeline (as a software switch or for packet outs), you must add the necessary code under my_asic/pipeline-imp/packet.c. You can reuse the packet classifier and other components from the reference gnu-linux platform driver. Take a look at the rest of drivers to see how this is leveraged.

9) If you wish, contribute back your platform port so that the community can benefit fro your work.

How to port your driver from 0.3 to 0.4
---------------------------------------

Refer to README_0.4-port

Related projects
----------

ROFL-pipeline: http://www.roflibs.org/doc/rofl-pipeline/ 
ROFL-HAL: http://www.roflibs.org/doc/rofl-hal/
